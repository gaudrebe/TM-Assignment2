import os
import numpy as np
from nltk.tokenize import word_tokenize
"""
Unigram Language Model
@author Ben Gaudreau
@version 23 Feb 2024
"""

class UnigramModel:
    """
    Construct a new unigram language model with the given corpus. The corpus
    should be a file path to a folder containing songs of a particular genre.
    """
    def __init__(self, corpus):
        self.termFrequency = self.buildGenreTFDict(corpus)
        return
    
    """
    Returns the probability of this unigram language model producing inputText.
    """
    def test(self, inputText):
        return self.calculateProbability(inputText)

    """
    Given a folder containing songs of one genre, returns a dictionary whose keys
    represent tokens, with values representing that token's frequency.
    """
    def buildGenreTFDict(self, path: str) -> dict:
        termFrequency = {}
        for file in os.listdir(path):
            with open(path + file, 'r') as rfile:
                for line in rfile:
                    # preprocess input
                    currLine = str.lower(line.strip())
                    tokens = word_tokenize(currLine)
                    for token in tokens:
                        if (token not in termFrequency):
                            termFrequency.update({token:1})
                        else:
                            termFrequency[token] += 1
        return termFrequency

    """
    Given the term frequency dictionary of songs from a genre of music(a classifier
    for that genre), returns the probability of inputText being generated by that
    genre's model.
    """
    def calculateProbability(self, inputText: str) -> float:
        genreProb = np.float64(0.0)
        genreTF = self.termFrequency
        vocabSize = len(genreTF)
        termCount = sum(genreTF.values())
        # preprocess input
        text = str.lower(inputText.strip())
        tokens = word_tokenize(text)
        # calculate and sum log probabilities for each token
        for token in tokens:
            tokenCount = genreTF.get(token, 0)
            tokenProb = np.log10((tokenCount + 1) / (termCount + vocabSize))
            genreProb += tokenProb
        return 10**genreProb

"""
For each folder of training data in directory, create a unigram language model
and return them all in a list.
"""
def buildModels(directory):
    # training data directory
    models = {}
    # build unigram models for each genre
    for genre in os.listdir(directory):
        songs = os.path.join(directory, directory + genre + "\\")
        model = UnigramModel(songs)
        models.update({genre:model})
    return models

"""
For all unigram language models in a list, calculate the probability for
inputText to be generated by that model, and return the model with the highest.
"""
def testModels(models: list, inputText: str) -> str:
    max = 0
    result = ""
    for genre in models:
        genreProb = models[genre].test(inputText)
        if (genreProb > max):
            result = genre
            max = genreProb
    return result